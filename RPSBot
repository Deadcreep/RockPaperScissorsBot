import random

"""Коды для жестов:
    0 — камень
    1 — ножницы
    2 — бумага

    Камень побеждает ножницы («камень затупляет или ломает ножницы»).
    Бумага побеждает камень («бумага накрывает камень»).
    Ножницы побеждают бумагу («ножницы разрезают бумагу»).

    Коды результатов раунда:
    0 — ничья
    1 — выиграл человек
    2 — выиграл бот

    Код вознаграждения
    1 - выиграл бот
    0 - ничья
    -1 - проигрыш

    A = { 'R', 'P', 'S' }
    R = { 1, 0, -1 } 
    W = { { 'R', 'R', 0 }, 
          { 'P', 'P', 0 }, 
          { 'S', 'S', 0 }, 
          { 'R', 'P', -1 }, 
          { 'R', 'S', 1 }, 
          { 'P', 'R', 1 }, 
          { 'P', 'S', -1 }, 
          { 'S', 'R', -1 }, 
          { 'S', 'P', 1 } 

    """

"""prev_human_sign - предыдущий жест 
prev_round_result – результат предыдущего раунда
round_number – номер текущего (k-ого) раунда,  
bot_sign – выбранный ботом жест в текущем (k-ом) раунде"""


class RPSBot:

    history = []
    nwin = 0
    ntie = 0
    nloss = 0
    iter = 0
    epsilon = 0.2
    begin = True
    score = {
        ('R', 'R'): 0, ('R', 'P'): -1, ('R', 'S'): 1,
        ('P', 'R'): 1, ('P', 'P'): 0, ('P', 'S'): -1,
        ('S', 'R'): -1, ('S', 'P'): 1, ('S', 'S'): 0
    }
    Q = dict()
    lr = 0.9
    limits = [5, 15, 30]
    beat = {'R': 'P', 'P': 'S', 'S': 'R'}

    def check_scores(self, output, input):
        if self.score[(output, input)] == 1:
            self.nloss += 1
        elif self.score[(output, input)] == 0:
            self.ntie += 1
        elif self.score[(output, input)] == -1:
            self.nwin += 1

    def bot(self, prev_human_sign=0, prev_round_result=0, round_number=0):
        while True:
            tt = input("Enter: ")
            inputS = tt
            if not inputS or begin:
                urmoves = ""
                mymoves = ""
                DNAmoves = ""
                output = random.choice(['R', 'P', 'S'])
                nuclease = {'RP': 'a', 'PS': 'b', 'SR': 'c', 'PR': 'd', 'SP': 'e', 'RS': 'f', 'RR': 'g', 'PP': 'h', 'SS': 'i'}
                length = 0
                newstate = tuple()
                print("Program choice: " + str(output))
                begin = False
            else:
                # History matching
                urmoves += inputS
                mymoves += output
                DNAmoves += nuclease[inputS + output]
                length += 1

                state = newstate
                newstate = []
                for z in range(1):
                    limit = min([length, self.limits[z]])
                    j = limit
                    while j >= 1 and not DNAmoves[length - j:length] in DNAmoves[0:length - 1]:
                        j -= 1
                    if j >= 1:
                        i = DNAmoves.rfind(DNAmoves[length - j:length], 0, length - 1)  # You seem to be playing based on our moves
                        newstate.append(urmoves[j + i])
                        newstate.append(mymoves[j + i])
                    j = limit
                    while j >= 1 and not urmoves[length - j:length] in urmoves[0:length - 1]:
                        j -= 1
                    if j >= 1:
                        i = urmoves.rfind(urmoves[length - j:length], 0, length - 1)  # You seem to be playing based on your moves
                        newstate.append(urmoves[j + i])
                        newstate.append(mymoves[j + i])
                    j = limit
                    while j >= 1 and not mymoves[length - j:length] in mymoves[0:length - 1]:
                        j -= 1
                    if j >= 1:
                        i = mymoves.rfind(mymoves[length - j:length], 0, length - 1)  # You seem to be playing based on my moves
                        newstate.append(urmoves[j + i])
                        newstate.append(mymoves[j + i])

                newstate = tuple(newstate)
                action = output
                print ("program gives: %s" % output)
                if self.score[(output, inputS)] == 1:
                    self.nloss += 1
                elif self.score[(output, inputS)] == 0:
                    self.ntie += 1
                elif self.score[(output, inputS)] == -1:
                    self.nwin += 1

                reward = self.score[(action, inputS)]
                maxvalue = max(self.Q.get((newstate, a), 0) for a in 'RPS')
                self.Q[(state, action)] = Q.get((state, action), 0) + self.lr * (reward + 0.5 * maxvalue - Q.get((state, action), 0))
                succ = [self.Q.get((newstate, a), 0) for a in 'RPS']
                optimal_actions = ['RPS'[x] for x in range(len(succ)) if succ[x] == max(succ)]
                output = random.choice(optimal_actions) if random.random() > self.epsilon else random.choice('RPS')
                print('Wins: {0}, Lose: {1}, Ties: {2}'.format(self.nwin, self.nloss, self.ntie))

    if __name__ == "__main__":
        
        bot()

